{"version":3,"file":"module.js","mappings":"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","sources":["webpack://epfl-alerting-panel/external amd \"@emotion/css\"","webpack://epfl-alerting-panel/external amd \"@grafana/data\"","webpack://epfl-alerting-panel/external amd \"@grafana/runtime\"","webpack://epfl-alerting-panel/external amd \"@grafana/ui\"","webpack://epfl-alerting-panel/external amd \"module\"","webpack://epfl-alerting-panel/external amd \"react\"","webpack://epfl-alerting-panel/webpack/bootstrap","webpack://epfl-alerting-panel/webpack/runtime/compat get default export","webpack://epfl-alerting-panel/webpack/runtime/define property getters","webpack://epfl-alerting-panel/webpack/runtime/hasOwnProperty shorthand","webpack://epfl-alerting-panel/webpack/runtime/make namespace object","webpack://epfl-alerting-panel/webpack/runtime/publicPath","webpack://epfl-alerting-panel/./node_modules/grafana-public-path.js","webpack://epfl-alerting-panel/./utils/dataUtils.ts","webpack://epfl-alerting-panel/./components/UpsStatus.tsx","webpack://epfl-alerting-panel/./components/PDUStatus.tsx","webpack://epfl-alerting-panel/./components/FANStatus.tsx","webpack://epfl-alerting-panel/./components/RackStatus.tsx","webpack://epfl-alerting-panel/./components/RailStatus.tsx","webpack://epfl-alerting-panel/./components/RowStatus.tsx","webpack://epfl-alerting-panel/./components/AlertingPanel.tsx","webpack://epfl-alerting-panel/./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__89__;","module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__308__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"public/plugins/epfl-alerting-panel/\";","\nimport amdMetaModule from 'amd-module';\n\n__webpack_public_path__ =\n  amdMetaModule && amdMetaModule.uri\n    ? amdMetaModule.uri.slice(0, amdMetaModule.uri.lastIndexOf('/') + 1)\n    : 'public/plugins/epfl-alerting-panel/';\n","import { DataFrame, Field } from '@grafana/data';\n\n// Define a generic type for the data items\nexport interface DataItem {\n  index: number;\n  [key: string]: any;\n}\n\n/**\n * Generic function to retrieve and map data from Grafana series.\n *\n * @param series - The array of data series from Grafana.\n * @param refId - The reference ID to filter the series.\n * @param fieldMapping - An array of field names to extract from each series.\n * @param baseIndex - A base index to ensure unique indexing.\n * @returns An array of mapped data items.\n */\nexport function retrieveData<T extends DataItem>(\n  series: DataFrame[],\n  refId: string,\n  fieldMapping: string[],\n  baseIndex: number = 1000\n): T[] {\n  return series\n    .filter(s => s.refId === refId)\n    .flatMap((s, seriesIndex) => {\n      const fieldsMap: Record<string, Field<any>> = {};\n\n      // Build the field mapping, matching fields that contain the field name\n      fieldMapping.forEach(fieldName => {\n        const field = s.fields.find(f => f.name.toLowerCase().includes(fieldName.toLowerCase()));\n        if (field) {\n          fieldsMap[fieldName] = field;\n        }\n      });\n\n      // Find the value field, accept '_value' or 'value' (case-insensitive)\n      let valueField = s.fields.find(f => ['_value', 'value'].includes(f.name.toLowerCase()));\n\n      if (!valueField) {\n        // If not found, search for a field whose name contains '_value' or 'value' (case-insensitive)\n        valueField = s.fields.find((f) => {\n          const nameLower = f.name.toLowerCase();\n          return ['_value', 'value'].some((val) => nameLower.includes(val));\n        });\n      }\n\n      // Ensure the primary field is present\n      const primaryFieldName = fieldMapping[0];\n      const primaryField = fieldsMap[primaryFieldName];\n\n      if (!primaryField || !valueField) {\n        return []; // Required fields are missing\n      }\n\n      const length = primaryField.values.length;\n      const items: T[] = [];\n\n      for (let index = 0; index < length; index++) {\n        const uniqueIndex = (seriesIndex + 1) * baseIndex + index;\n        const item: any = { index: uniqueIndex };\n\n        fieldMapping.forEach(fieldName => {\n          const field = fieldsMap[fieldName];\n          if (field) {\n            const value = field.values.get(index);\n            item[fieldName] = value !== undefined ? value : '';\n          } else {\n            item[fieldName] = '';\n          }\n        });\n\n        // Include the value field in the item\n        const valueFieldValue = valueField.values.get(index);\n        item['_value'] = valueFieldValue !== undefined ? valueFieldValue : '';\n\n        items.push(item as T);\n      }\n\n      return items;\n    });\n}\n\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { Tooltip } from '@grafana/ui';\n// Define the type for options\n\n\ninterface UpsStatusProps {\n  ups: any;\n  size?: 'sm' | 'md' | 'lg';\n  showName?: boolean;\n  options: any;\n}\n\nexport const UpsStatus: React.FC<UpsStatusProps> = ({ ups, size = 'sm', showName = false, options }) => {\n  // Determine the size of the square based on the size prop\n  const xSize = size === 'sm' ? `${options.upsSizeWidth * .5 }px` : size === 'md' ? `${options.upsSizeWidth }px` : `${options.upsSizeWidth * 1.2}px`;\n  const ySize = size === 'sm' ? `${options.upsSizeHeight * .5 }px` : size === 'md' ? `${options.upsSizeHeight }px` : `${options.upsSizeHeight * 1.2}px`;\n  const styles = {\n    upsContainer: css`\n      display: flex;\n      flex-direction: column;\n      align-items: left;\n      justify-content: left;\n      \n    `,\n\n    ups: css`\n      display: flex;\n      width: ${xSize};\n      height: ${ySize};\n      background-color: ${+ups.value > 0 ? options.successColor : options.errorColor};\n      margin-right: 1px;\n      cursor: pointer;\n      transition: background-color 0.3s;\n      &:hover {\n        background-color: ${options.activeColor}; \n      }\n    `,\n\n    upsName: css`\n      font-size: 10px;\n      color: #999;\n      font-weight: bold;\n      font-size: ${options.upsTextsize}px;\n      cursor: pointer;\n      &:hover {\n        color:${options.activeColor}; \n      }\n    `,\n  };\n\n  const [, type, nbr , ] = ups.pdu_name.match(/dc-cct-(.+)(\\d+)-ups(\\d+)/) || [];\n  const upsName=(type+nbr).toUpperCase()\n  \n  return (\n    <div className={styles.upsContainer}>\n      <Tooltip \n        placement=\"right\"\n        content={\n          <div>\n            <div style={{ fontSize: '14px', fontWeight: 'bold', marginBottom: '4px' }}>{upsName}</div>\n            <div style={{ fontSize: '14px',  marginBottom: '4px' }}>{ups.pdu_name}</div>\n            <div style={{ fontSize: '14px',  marginBottom: '4px' }}>{ups.pdu_ip}</div>\n          </div>\n          }>\n        <div>\n          <div className={styles.upsName}>{upsName}</div>\n          <div\n            className={styles.ups}\n            onClick={() => window.open(`${options.upsURL}?var-ups_name=${ups.pdu_name}`, '_blank')}\n            />\n          {showName && <span>{ups.ups_name}</span>}\n        </div>\n      </Tooltip>\n    </div>\n  );\n};","import React from 'react';\nimport { css } from '@emotion/css';\n// Define the type for options\n\n\ninterface PDUStatusProps {\n  pdu: any;\n  size?: 'xs' |\t 'sm' | 'md' | 'lg';\n  showName?: boolean;\n  options: any;\n}\n\nexport const PDUStatus: React.FC<PDUStatusProps> = ({ pdu, size = 'md', showName = false, options }) => {\n  // Determine the size of the square based on the size prop\n  const xSize = size === 'xs' ? `${options.rackSize *.18 *1}px` : size === 'sm' ? `${options.rackSize *.2 *2}px` : size === 'md' ? `${options.rackSize * .18}px` : `${options.rackSize* 1.5 *.2}px`;\n  const ySize = size === 'xs' ? `${options.rackSize * 0.6}px` : size === 'sm' ? `${options.rackSize *.2 *2}px` : size === 'md' ? `${options.rackSize * 1.2 }px` : `${options.rackSize* 1.5 *.8}px`;\n  const styles = {\n    pdu: css`\n      width: ${xSize};\n      height: ${ySize};\n      background-color: ${+pdu.value > 0 ? options.successColor : options.errorColor};\n      margin-right: 1px;\n      cursor: pointer;\n      transition: background-color 0.3s;\n\n      &:hover {\n        background-color: ${options.activeColor};\n      }\n    `,\n  };\n  return (\n    <div style={{ display: 'flex', alignItems: 'center' }}>\n      <div\n        className={styles.pdu}\n        onClick={() => window.open(`${options.pduURL}?var-pdu_name=${pdu.pdu_name}`, '_blank')}\n      />\n      {showName && <span>{pdu.pdu_name}</span>}\n    </div>\n  );\n};","import React from 'react';\nimport { css } from '@emotion/css';\nimport { Tooltip } from '@grafana/ui';\n// Define the type for options\n\n\ninterface FANStatusProps {\n  pdu: any;\n  size?: 'sm' | 'md' | 'lg';\n  showName?: boolean;\n  options: any;\n}\n\nexport const FANStatus: React.FC<FANStatusProps> = ({ pdu, size = 'sm', showName = false, options }) => {\n  // Determine the size of the square based on the size prop\n  const xSize = size === 'sm' ? `${options.pduSize}px` : size === 'md' ? `${options.pduSize * 2}px` : `${options.pduSize}px`;\n  const ySize = size === 'sm' ? `${options.pduSize}px` : size === 'md' ? `${options.pduSize * 2}px` : `${options.pduSize}px`;\n  const styles = {\n    fansContainer: css`\n      display: flex;\n      flex-direction: column;\n      gap: 2px;\n    `,\n    fans: css`\n      width: ${xSize};\n      height: ${ySize};\n      \n      background-color: ${+pdu.value > 0 ? options.successColor : options.errorColor};\n      \n      cursor: pointer;\n      transition: background-color 0.3s;\n\n      &:hover {\n        background-color: ${options.activeColor};\n      }\n    `,\n  };\n  return (\n    <div className={styles.fansContainer}>\n      {Array.from({ length: 4 }).map((_, index) => (\n        <Tooltip content={pdu.pdu_name} placement=\"auto\">\n        <div\n          key={index}\n          className={styles.fans}\n          onClick={() => window.open(`${options.fanURL}?var-pdu_name=${pdu.pdu_name}`, '_blank')}\n        />\n        </Tooltip>\n      ))}\n      {showName && <span>{pdu.pdu_name}</span>}\n    </div>\n  );\n};","import React, { useState } from 'react';\nimport { css } from '@emotion/css';\nimport { PDUStatus } from './PDUStatus';\nimport { Tooltip } from '@grafana/ui';\nimport { FANStatus } from './FANStatus';\ninterface RackStatusProps {\n  options: any;\n  rack: any;\n  row: any;\n  pduData: any;\n  pduStatusData: any;\n  fanData: any;\n}\n\nexport const RackStatus: React.FC<RackStatusProps> = ({ options, rack, row, pduData, pduStatusData, fanData }) => {\n  const [_isHovered, setIsHovered] = useState(false);\n\n\n\n  const styles = {\n    pduContainer: css`\n      width: ${options.rackSize}px;\n      height: ${options.rackSize * 1.4}px;\n      display: grid;\n      grid-template-columns: repeat(4, 1fr);\n      grid-template-rows: 1fr;\n      \n      padding: 1px;\n      background-color: #333;\n    `,\n    rectangle: css`\n      width: 100%;\n      height: 100%;\n    `,\n    rackName: css`\n      font-size: ${options.RackTextsize}px; \n      &:hover {\n        color: ${options.activeColor};\n      }\n    `,\n    rackContainer: css`\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    `,\n    fanContainer: css`\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 2px;\n    `,\n    fan: css`\n      margin-right: 2px;\n    `,\n  };\n  \n  const pduDataForCurrentRack = pduData.filter(\n    (pdu: any) => pdu.rack_fname === rack.rack_fname\n  );\n  \n  const pduStatusDataForCurrentRack = pduStatusData.filter(\n    (pdu: any) => pdu.rack_fname === rack.rack_fname\n  );\n  \n  const fanDataForCurrentRack = fanData.filter(\n    (fan: any) => fan.rack_fname === rack.rack_fname\n  );\n\n  const combinedPduData = pduDataForCurrentRack.map((pdu: any) => {\n    const status = pduStatusDataForCurrentRack.find((status: any) => status.pdu_name === pdu.pdu_name);\n    return {\n      ...pdu,\n      value: status ? status.Value : null\n    };\n  });\n  \n  const combinedFanData = fanDataForCurrentRack.map((fan: any) => {\n    const status = pduStatusDataForCurrentRack.find((status: any) => status.pdu_name === fan.pdu_name);\n    return {\n      ...fan,\n      value: status ? status.Value : null\n    };\n  });\n\n  const tooltipContent = pduDataForCurrentRack.length > 0 ? (\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\n      {combinedPduData.map((pdu: any, index: any) => (\n        <div key={index} style={{ display: 'flex', alignItems: 'center', marginBottom: '5px' }}>\n          <PDUStatus\n            size={combinedPduData.length>4 ? 'xs' : 'sm'}\n            pdu={pdu}\n            \n            showName={true}\n            options={options}\n          />\n        </div>\n      ))}\n    </div>\n  ) : (\n    <div>No PDU</div>\n  );\n\n  return (\n    <div>\n    <div \n      className={styles.rackName}\n      onClick={() => window.open(`${options.rackURL}?var-rack_fname=${rack.rack_fname}`, '_blank')}\n      style={{ cursor: 'pointer' }}\n    >\n      {rack.rack_name}\n      </div> \n      <div className={styles.rackContainer}>\n        <div className={styles.fanContainer}>\n          {combinedFanData.map((fan: any, index: any) => (\n            <div key={index} className={styles.fan}>\n              <FANStatus \n                pdu={fan} \n                size='sm'\n                showName={false}\n                options={options}\n              />\n            </div>\n          ))}\n        </div>\n        <Tooltip content={tooltipContent} placement=\"auto\">\n          <div\n            onMouseEnter={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n          >\n            <div className={styles.pduContainer}>\n            {combinedPduData.map((pdu: any, index: any) => (\n                <PDUStatus \n                key={index} \n                pdu={pdu} \n                size={combinedPduData.length>4 ? 'xs' : 'md'}\n                showName={false}\n                options={options}\n                />\n                ))}\n            </div>\n          </div>\n        </Tooltip>\n      </div>\n      </div>\n  );\n};\n\nexport default RackStatus;\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { Tooltip } from '@grafana/ui';\n// Define the type for options\n\n\ninterface RailStatusProps {\n  rail: any;\n  size?: 'sm' | 'md' | 'lg';\n  showName?: boolean;\n  options: any;\n}\n\nexport const RailStatus: React.FC<RailStatusProps> = ({ rail, size = 'md', showName = false, options }) => {\n  // Determine the size of the square based on the size prop\n  const xSize = size === 'sm' ? `${options.railSize * 2 }px` : size === 'md' ? `${options.railSize}px` : `${options.railSize * .8}px`;\n  const ySize = size === 'sm' ? `${options.railSize * 2 }px` : size === 'md' ? `${options.railSize * .1 }px` : `${options.railSize * .8}px`;\n  const styles = {\n    railContainer: css`\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      justify-content: center;\n      \n    `,\n    rail: css`\n      display: flex;\n      width: ${xSize};\n      height: ${ySize};\n      background-color: ${+rail.value > 0 ? options.successColor : options.errorColor};\n      margin-right: 1px;\n      cursor: pointer;\n      transition: background-color 0.3s;\n\n      &:hover {\n        background-color: ${options.activeColor};\n      }\n    `,\n    railName: css`\n      font-size: 10px;\n      color: #999;\n      margin-right: 8px;\n      \n    `,\n  };\n  return (\n    <div className={styles.railContainer}>\n      <Tooltip \n        placement=\"right\"\n        content={\n          <div>\n            <div style={{ fontSize: `${options.railTextsize}px`, fontWeight: 'bold', marginBottom: '4px' }}>{rail.rail_name}</div>\n            <div style={{ fontSize: `12px`,  marginBottom: '4px' }}>{rail.pdu_name}</div>\n            <div style={{ fontSize: `12px`,  marginBottom: '4px' }}>{rail.pdu_ip}</div>\n          </div>\n        }>\n        <div>\n          <div\n            className={styles.rail}\n            onClick={() => window.open(`${options.railURL}?var-pdu_name=${rail.pdu_name}`, '_blank')}\n            />\n          {showName && <span>{rail.pdu_name}</span>}\n        </div>\n      </Tooltip>\n    </div>\n  );\n};","import React from 'react';\nimport { css } from '@emotion/css';\nimport RackStatus from './RackStatus';\nimport {RailStatus} from './RailStatus';\nimport { Tooltip } from '@grafana/ui';\n\ninterface RowStatusProps {\n  pduData: any[];\n  rackData: any[];\n  railData: any[];\n  fanData: any[];\n  options: any;\n  row: any;\n  pduStatusData: any[];\n  tcpStatusData: any[];\n}\n\n\nconst RowStatus: React.FC<RowStatusProps> = ({options, pduData  , rackData, railData, row, pduStatusData, fanData, tcpStatusData }) => {\n  const styles = {\n    container: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-start;\n      margin-bottom: 2px;\n    `,\n    rowName: css`\n      font-weight: bold;\n      margin-bottom: 2px;\n      margin-right: 2px;\n      margin-left: 2px;\n      \n      font-size: ${options.rowTextsize}px;\n      color: #aaa;\n      cursor: pointer;\n      align-self: center;\n      white-space: nowrap;\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      justify-content: center;\n      \n      width: 100px;\n      word-wrap: break-word;\n      white-space: normal;\n\n      &:hover {\n        color: ${options.activeColor};\n      }\n    `,\n    rackContainer: css`\n      display: flex;\n      gap: 5px;\n      \n    `,\n    railContainer: css`\n      display: grid;\n      grid-template-columns: 1fr;\n      grid-template-rows: repeat(4, 1fr);\n      padding: 1px;\n      background-color: #333;\n      padding: 5px;\n      gap: 5px;\n      margin-top: 10px;\n      margin-left: 5px;\n      margin-right: 10px;\n    `,\n    rowheader: css`\n      display: flex;\n      flex-direction: row;\n    `,\n  };\n  \n  const pduDataForCurrentRow = pduData.filter(\n    (pdu: any) => pdu.row_name === row.row_name\n  );\n\n  const pduStatusDataForCurrentRow = pduStatusData.filter(\n    (pdu: any) => pdu.row_name === row.row_name\n  );\n\n  const fanDataForCurrentRow = fanData.filter(\n    (fan: any) => fan.row_name === row.row_name\n  );\n\n\n// Updated code starts here\nconst railDataForCurrentRow = railData\n.filter((rail: any) => {\n  if (\n    typeof rail.pdu_name === 'string' &&\n    typeof row.row_name === 'string'\n  ) {\n    return rail.pdu_name\n      .toLowerCase()\n      .includes(row.row_name.toLowerCase());\n  }\n  return false;\n})\n.map((rail: any) => {\n  // Extract 'masterx' from pdu_name\n  const masterNameMatch = rail.pdu_name.match(/(master\\d+)/i);\n  const master_name = masterNameMatch ? masterNameMatch[1] : null;\n\n  return {\n    ...rail,\n    master_name: master_name, // Add the new field here\n    };\n  });\n  const combinedRailData = railDataForCurrentRow.map((rail: any) => {\n    const status = tcpStatusData.find((status: any) => status.host_name === rail.master_name);\n    return {\n      ...rail,\n      value: status ? status._value : null\n    };\n  });\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.rowheader}>\n        <Tooltip placement=\"right\" content={\n          <div>\n            <div style={{ fontSize: '14px', fontWeight: 'bold', marginBottom: '4px' }}>{row.row_name}</div>\n            <div style={{ fontSize: '10px', color: '#999' }}>Racks: {rackData.length}</div>\n            <div style={{ fontSize: '10px', color: '#999' }}>PDUs: {pduData.length}</div>\n          </div>\n        }>\n          <div \n            className={styles.rowName}\n            onClick={() => window.open(`${options.rowURL}?var-row_name=${row.row_name}&var-dc_name=${row.dc_name}`, '_blank')}\n            style={{ cursor: 'pointer' }}\n          >\n            <div style={{ wordWrap: 'break-word' }}>{row.row_name}</div>\n          </div>\n        </Tooltip>\n\n\n      </div>\n      \n      {combinedRailData.length > 0 && (\n      <div id=\"railContainer\" className={styles.railContainer}>\n\n        {combinedRailData.map((rail) => (\n          <RailStatus \n            rail={rail}\n            options={options}\n          />\n        ))}\n\n      </div>)}\n      <div className={styles.rackContainer}>\n       \n        \n        {rackData.map((rack) => (\n          <RackStatus \n            rack={rack}\n            row={row}\n            pduData={pduDataForCurrentRow}\n            pduStatusData={pduStatusDataForCurrentRow}\n            fanData={fanDataForCurrentRow}\n            options={options}\n          />\n        ))}\n       \n      </div>\n    </div>\n  );\n};\n\nexport default RowStatus;\n","import React, { useMemo } from 'react';\nimport { PanelProps, DataFrame } from '@grafana/data';\nimport { retrieveData } from 'utils/dataUtils';\nimport { SimpleOptions } from 'types';\nimport { css } from '@emotion/css'; \nimport { useStyles2 } from '@grafana/ui';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { UpsStatus } from './UpsStatus';\nimport RowStatus from './RowStatus';\n\ninterface Props extends PanelProps<SimpleOptions> {}\n\nconst getStyles = () => {\n  return {\n   \n    textBox: css`\n      position: absolute;\n      bottom: 0;\n      right: 50px;\n      padding: 10px;\n      font-size: 10px;\n      color: #999;\n    `,\n    AlertingPanelContainer: css`\n      width: 100%;\n      height: 100%;\n      max-height: 100%;\n      overflow: auto; \n      display: flex;\n      flex-direction: row;\n    `,\n    rowContainer: css`\n      display: flex;\n      flex-direction: column;\n      gap: 5px;\n    `,\n    upsContainer: css`\n      display: flex;\n      flex-direction: column;\n      gap: 5px;\n      margin-right: 10px;\n      margin-left: 10px;\n    `,\n  };\n};\n\nexport const AlertingPanel: React.FC<Props> = ({ options, data, fieldConfig, id }) => {\n  const styles = useStyles2(getStyles);\n\n  if (data.series.length === 0) {\n    return (\n      <PanelDataErrorView\n        fieldConfig={fieldConfig}\n        panelId={id}\n        data={data}\n        needsStringField\n      />\n    );\n  }\n\n  const RackInfoFieldMapping = [\n    'rack_fname',\n    'rack_name',\n    'rack_owner',\n    'rack_group',\n    'row_id',\n    'row_name',\n    'dc_name',\n    'dc_location',\n    'room_name',\n    'pdu_count',\n    '_value',\n  ];\n  const RailInfoFieldMapping = [\n    'pdu_master',\n    'pdu_name',\n    'pdu_group',\n    'pdu_model',\n    'pdu_master',\n    'pdu_type',\n    'pdu_ip',\n    'rail_name',\n    '_value',\n  ];\n  const FanInfoFieldMapping = [\n    'pdu_name',\n    'pdu_group',\n    'pdu_model',\n    'pdu_serial',\n    'pdu_firmware',\n    'pdu_master',\n    'pdu_type',\n    'pdu_mac',\n    'pdu_ip',\n    'rack_fname',\n    'dc_location',\n    'rail_name',\n    'row_name',\n    '_value',\n  ];\n  const PduInfoFieldMapping = [\n    'pdu_name',\n    'pdu_group',\n    'pdu_model',\n    'pdu_serial',\n    'pdu_firmware',\n    'pdu_master',\n    'pdu_type',\n    'pdu_mac',\n    'pdu_ip',\n    'rack_fname',\n    'dc_location',\n    'rail_name',\n    'row_name',\n    '_value',\n  ];\n  const UpsInfoFieldMapping = [\n    'pdu_name',\n    'rail_name',\n    '_value',\n  ];\n\n  const PduStatusFieldMapping = [\n    'host_name',\n    'pdu_name',\n    'row_name',\n    'rack_name',\n    'rack_fname',\n    'Value',\n\n  ];\n\n  const TcpStatusFieldMapping = [\n    'host_name',\n    'pdu_name',\n    'row_name',\n    'rack_name',\n    'rack_fname',\n    'probe_success',\n    'Value',\n    \n\n  ];\n\n  // Retrieve data using the utility function\n  const rawRackData: any[] = retrieveData<any>(\n    data.series as DataFrame[],\n    'rackInfo',\n    RackInfoFieldMapping\n  );\n\n  const rawPduData: any[] = retrieveData<any>(\n    data.series as DataFrame[],\n    'pduInfo',\n    PduInfoFieldMapping\n  );\n\n  const rawPduStatusData: any[] = retrieveData<any>(\n    data.series as DataFrame[],\n    'alertingStatus',\n    PduStatusFieldMapping\n  );\n\n  const rawRailData: any[] = retrieveData<any>(\n    data.series as DataFrame[],\n    'railInfo',\n    RailInfoFieldMapping\n  );\n\n  const rawFanData: any[] = retrieveData<any>(\n    data.series as DataFrame[],\n      'fanInfo',\n      FanInfoFieldMapping\n  );\n  \n  const rawUpsData: any[] = retrieveData<any>(\n    data.series as DataFrame[],\n      'upsInfo',\n      UpsInfoFieldMapping\n  );\n\n  const rawTcpData: any[] = retrieveData<any>(\n    data.series as DataFrame[],\n      'tcpStatus',\n      TcpStatusFieldMapping\n  );\n\n  const combinedUpsData = rawUpsData.map((ups) => {\n    const status = rawPduStatusData.find((status: any) => status.pdu_name === ups.pdu_name);\n    return {\n      ...ups,\n      value: status ? status.Value : null\n    };\n  });\n  \n  const rowList: { row_id: string; row_name: string; dc_name: string }[] = useMemo(() => {\n    const rowMap = new Map<string, { row_id: string; dc_name: string }>(); // Key: row_name, Value: { row_id, dc_name }\n    \n    rawRackData.forEach((item) => {\n      if (item.row_name && item.row_id && item.dc_name && !rowMap.has(item.row_name)) {\n        rowMap.set(item.row_name, { row_id: item.row_id, dc_name: item.dc_name });\n      }\n    });\n  \n    return Array.from(rowMap.entries())\n      .map(([row_name, { row_id, dc_name }]) => ({ row_name, row_id, dc_name }))\n      .sort((a, b) => a.row_name.localeCompare(b.row_name));\n  }, [rawRackData]);\n  \n    \n    return (\n    <div className={styles.AlertingPanelContainer}>\n      <div className={styles.upsContainer}>\n        {combinedUpsData.map((ups) => {\n          return (\n            <UpsStatus \n              ups={ups}\n              options={options}\n            />\n          )\n        })}\n      </div>\n      <div className={styles.rowContainer}>\n      \n          {rowList.map((row) => {\n              const filteredPduData = rawPduData.filter(\n                (pdu) => pdu.row_name === row.row_name\n              );\n              const filteredRackData = rawRackData.filter(\n                (rack) => rack.row_name === row.row_name\n              );\n              const filteredPduStatusData = rawPduStatusData.filter(\n                (pdu) => pdu.row_name === row.row_name || pdu.device_type === \"modbus\"\n              );\n              return (\n            <RowStatus \n              row={row}\n              pduData={filteredPduData}\n              rackData={filteredRackData}\n              railData={rawRailData}\n              fanData={rawFanData}\n              pduStatusData={filteredPduStatusData}\n              tcpStatusData={rawTcpData}\n              options={options}\n              \n            />\n          )\n        })}\n      </div>\n      <div className={styles.textBox}>\n        PDU Panel by EPFL/ITOP-INFR v.0.25\n      </div>\n    </div>\n  );\n};\n\nexport default AlertingPanel;\n","import { PanelPlugin } from '@grafana/data';\nimport { SimpleOptions } from './types';\nimport { AlertingPanel } from 'components/AlertingPanel';\n\nexport const plugin = new PanelPlugin<SimpleOptions>(AlertingPanel).setPanelOptions((builder) => {\n  return builder\n  // global color options //\n  .addColorPicker({\n    path: 'successColor',\n    name: 'Success Color',\n    description: 'Success Color',\n    defaultValue: '#00ff00',\n    category: ['Global'],\n  })\n  .addColorPicker({\n    path: 'errorColor',\n    name: 'Error Color',\n    description: 'Error Color',\n    defaultValue: '#ff0000',\n    category: ['Global'],\n  })\n  .addColorPicker({\n    path: 'activeColor',\n    name: 'Active Color',\n    description: 'Mouse over Active Color',\n    defaultValue: '#0000ff',\n    category: ['Global'],\n  })\n\n  // UPS panel options //\n  .addSliderInput({\n      path: 'upsSizeWidth', \n      name: 'UPS dimensions',\n      description: 'UPS dimensions',\n      category: ['UPS'],\n      defaultValue: 100,\n      settings: {\n        min: 10,\n        max: 300,\n        step: 1,\n      },\n    })\n  .addSliderInput({\n      path: 'upsSizeHeight', \n      name: 'UPS dimensions',\n      description: 'UPS dimensions',\n      category: ['UPS'],\n      defaultValue: 100,\n      settings: {\n        min: 10,\n        max: 300,\n        step: 1,\n      },\n    })\n    .addTextInput({\n      path: 'upsTextsize', \n      name: 'upsTextsize',\n      description: 'UPS Text size',\n      defaultValue: '12',\n      category: ['UPS'],\n    })\n    .addTextInput({\n      path: 'upsURL', \n      name: 'upsURL',\n      description: 'UPS URL',\n      defaultValue: '/d/ae0ubbk3if400d/datacenter-view-ups',\n      category: ['UPS'],\n    })\n\n  // Row panel options //\n    .addTextInput({\n      path: 'rowURL', \n      name: 'rowURL',\n      description: 'Row URL',\n      defaultValue: '/d/a538aeff-5a8a-42a5-901c-938123fdd6f/datacenter-custom-row-panel',\n      category: ['Row'],\n    })\n    .addTextInput({\n      path: 'rowTextsize', \n      name: 'rowTextsize',\n      description: 'Row Text size',\n      defaultValue: '10',\n      category: ['Row'],\n    })\n    // rail panel options //\n    .addTextInput({\n      path: 'railURL', \n      name: 'railURL',\n      description: 'Rail URL',\n      defaultValue: '/d/fdyyae74x0irka/datacenter-view-rail',\n      category: ['Rail'],\n    })  \n    .addTextInput({\n      path: 'railTextsize', \n      name: 'railTextsize',\n      description: 'Rail Text size',\n      defaultValue: '14',\n      category: ['Rail'],\n    })\n    .addSliderInput({\n      path: 'railSize', \n      name: 'railSize',\n      description: 'Rail dimensions',\n      category: ['Rail'],\n      defaultValue: 50,\n      settings: {\n        min: 10,\n        max: 400,\n        step: 1,\n      },\n    })\n\n  // Rack panel options //\n    .addTextInput({\n      path: 'rackURL', \n      name: 'rackURL',\n      description: 'Rack URL',\n      defaultValue: '/d/cdou123admle29sf/datacenter-view-rack',\n      category: ['Rack'],\n    })\n\n    .addTextInput({\n      path: 'fanURL', \n      name: 'fanURL',\n      description: 'Fan URL',\n      defaultValue: '/d/ce0xm7wjr9ywwe/datacenter-view-fan',\n      category: ['Rack'],\n    })\n\n    .addTextInput({\n      path: 'RackTextsize', \n      name: 'Rack Textsize',\n      description: 'Rack Text size',\n      defaultValue: '10',\n      category: ['Rack'],\n    })\n    .addSliderInput({\n      path: 'rackSize', \n      name: 'rackSize',\n      description: 'Rack dimensions',\n      category: ['Rack'],\n      defaultValue: 30,\n      settings: {\n        min: 15,\n        max: 50,\n        step: 1,\n      },\n    })\n\n    // PDU panel options //\n    .addTextInput({\n      path: 'pduURL', \n      name: 'pduURL',\n      description: 'PDU URL',\n      defaultValue: '/d/ddqco4d3utj4asd/datacenter-view-pdu',\n      category: ['PDU'],\n    })\n    .addTextInput({\n      path: 'PDUTextsize', \n      name: 'PDU Text size',\n      description: 'PDU Text size',\n      defaultValue: '12',\n      category: ['PDU'],\n    })\n    .addBooleanSwitch({\n      path: 'tooltips', \n      name: 'Tooltips',\n      defaultValue: true,\n      category: ['PDU'],\n    })\n    .addTextInput({\n      path: 'TooltipTextsize', \n      name: 'Tooltip Text size',\n      description: 'Tooltip Text size',\n      defaultValue: '12',\n      category: ['PDU'],\n    })\n    .addSliderInput({\n      path: 'pduSize', \n      name: 'pduSize',\n      description: 'PDU dimensions',\n      category: ['PDU'],\n      defaultValue: 5,\n      settings: {\n        min: 1,\n        max: 10,\n        step: 1,\n      },\n    });\n});\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__89__","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__308__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","slice","lastIndexOf","retrieveData","series","refId","fieldMapping","baseIndex","filter","s","flatMap","seriesIndex","fieldsMap","forEach","fieldName","field","fields","find","f","name","toLowerCase","includes","valueField","nameLower","some","val","primaryFieldName","primaryField","length","values","items","index","item","valueFieldValue","push","UpsStatus","ups","size","showName","options","xSize","upsSizeWidth","ySize","upsSizeHeight","styles","upsContainer","css","successColor","errorColor","activeColor","upsName","upsTextsize","type","nbr","pdu_name","match","toUpperCase","div","className","Tooltip","placement","content","style","fontSize","fontWeight","marginBottom","pdu_ip","onClick","window","open","upsURL","span","ups_name","PDUStatus","pdu","rackSize","display","alignItems","pduURL","FANStatus","pduSize","fansContainer","fans","Array","from","map","_","fanURL","rack","row","pduData","pduStatusData","fanData","_isHovered","setIsHovered","useState","pduContainer","rectangle","rackName","RackTextsize","rackContainer","fanContainer","fan","pduDataForCurrentRack","rack_fname","pduStatusDataForCurrentRack","fanDataForCurrentRack","combinedPduData","status","Value","combinedFanData","tooltipContent","flexDirection","rackURL","cursor","rack_name","onMouseEnter","onMouseLeave","RailStatus","rail","railSize","railContainer","railName","railTextsize","rail_name","railURL","rackData","railData","tcpStatusData","container","rowName","rowTextsize","rowheader","pduDataForCurrentRow","row_name","pduStatusDataForCurrentRow","fanDataForCurrentRow","combinedRailData","masterNameMatch","master_name","host_name","_value","color","rowURL","dc_name","wordWrap","id","RackStatus","getStyles","textBox","AlertingPanelContainer","rowContainer","AlertingPanel","data","fieldConfig","useStyles2","PanelDataErrorView","panelId","needsStringField","rawRackData","rawPduData","rawPduStatusData","rawRailData","rawFanData","rawUpsData","rawTcpData","combinedUpsData","rowList","useMemo","rowMap","Map","row_id","has","set","entries","sort","b","localeCompare","filteredPduData","filteredRackData","filteredPduStatusData","device_type","RowStatus","plugin","PanelPlugin","setPanelOptions","builder","addColorPicker","path","description","defaultValue","category","addSliderInput","settings","min","max","step","addTextInput","addBooleanSwitch"],"sourceRoot":""}